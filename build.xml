<?xml version="1.0"?>

<project name="filth" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

    <!-- ================================================================= -->
    <!-- Properties and classpaths -->
    <property environment="env"/>
    
    <property file="build.properties"/>
    <property file="conf/${project.name}.properties"/>
    
    <property name="src.dir" value="src/main/java"/>
    <property name="test.dir" value="src/test"/>
    <property name="web.dir" value="web"/>
    <property name="build.dir" value="build"/>
    <property name="lib.dir" value="lib"/>
    <property name="ivy.report.dir" value="ivy-report"/>
    <property name="scripts.dir" value="scripts"/>

    <path id="master-classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <!-- include servlet API classes: -->
        <fileset dir="${tomcat.lib.dir}">
            <include name="servlet*.jar"/>
        </fileset>
        <pathelement path="${build.dir}/main"/>
    </path>
    
    <path id="test-classpath">
        <path refid="master-classpath"/>
        <pathelement path="${build.dir}/test"/>
        <!-- TD: service tests need, for example spring-orm's LocalSessionFactorBean at runtime, -->
        <!-- but we probably should include *all* runtime jars -->
        <fileset dir="${web.dir}/WEB-INF/lib">
            <include name="**/*.jar"/>
        </fileset>
        <!-- Need to include the logging configuration for running tests -->
        <!-- (otherwise running tests will result in *a ton* of DEBUG output) --> 
        <pathelement path="${test.dir}/resources"/> 
    </path>
    
    <!-- ================================================================= -->
    <!-- Ivy -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement path="${ant.home.dir}/lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>
    
    <target name="ivy-clean" description="Remove all dependencies retrieved from Ivy">
        <delete dir="${lib.dir}" includeemptydirs="true" failonerror="true" />
        <delete dir="${web.dir}/WEB-INF/lib" includeemptydirs="true" failonerror="true" />
    </target>
    
    <target name="ivy-resolve" description="Get dependencies using Ivy">
        <ivy:configure />
        
        <!-- resolve compile-time dependencies into a directory from which 'build' will use during compilation -->
        <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].[ext]" type="jar,bundle" conf="compile"/>
        <!-- resolve runtime dependencies into a directory from which 'deploy' will copy to tomcat -->
        <ivy:retrieve pattern="${web.dir}/WEB-INF/lib/[artifact]-[revision].[ext]" type="jar,bundle" conf="runtime"/>
    </target>

    <target name="ivy-report" depends="ivy-clean" description="Output a detailed html Ivy report to ${ivy.report.dir}">
        <ivy:resolve />
        <ivy:report todir="${ivy.report.dir}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Tomcat -->
    <target name="tomcat-clean" description="Removes the project from tomcat">
        <delete dir="${tomcat.deploy.dir}/${project.name}" includeemptydirs="true" />
        <delete file="${tomcat.deploy.dir}/${project.name}.war" failonerror="false" />
    </target>

    <target name="tomcat-start" description="Start tomcat">
        <exec executable="bash" failonerror="true">
            <arg value="${tomcat.home.dir}/bin/catalina.sh"/>
            <arg value="start"/>
        </exec>
    </target>
    
    <target name="tomcat-debug-start" description="Start tomcat with debugging turned on">
        <exec executable="bash" failonerror="true">
            <arg value="${tomcat.home.dir}/bin/catalina.sh"/>
            <arg line="jpda start"/>
            <env key="JPDA_ADDRESS" value="${tomcat.jpda.address}"/>
            <!-- <env key="JAVA_OPTS" value="${tomcat.java.opts}"/> --><!-- uncomment if you want to use specific options for the jvm -->
        </exec>
    </target>
    
    <target name="tomcat-stop" description="Stop tomcat">
        <exec executable="bash" failonerror="true">
            <arg value="${tomcat.home.dir}/bin/catalina.sh"/>
            <arg value="stop"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Build targets -->
    <target name="build" description="Compile main source tree java files">
        <delete dir="${build.dir}/main"/>
        <mkdir dir="${build.dir}/main"/>
        <javac destdir="${build.dir}/main" source="1.8" target="1.8" debug="true"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${src.dir}"/>
            <classpath refid="master-classpath"/>
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- Deploy targets -->
    <target name="create-app-jar" description="Creates a jar file containing this project's compiled java source to be included in the deployed .war file">
        <jar
            basedir="${build.dir}/main"
            destfile="${web.dir}/WEB-INF/lib/${project.name}.jar"
            update="false"
        />
    </target>

    <target name="deploy" depends="build, create-app-jar" description="Deploy application as a WAR (.war) file">
        <war destfile="${tomcat.deploy.dir}/${project.name}.war" webxml="${web.dir}/WEB-INF/web.xml">
            <fileset dir="${web.dir}">
                <include name="**/*.*"/>
            </fileset>
        </war>
    </target>
    
    <target name="ftl-hot-deploy" description="Hot-deploy freemarker templates (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/WEB-INF/view" granularity="0" verbose="true">
            <fileset dir="${web.dir}/WEB-INF/view"/>
        </sync>
    </target>
  
    <target name="js-hot-deploy" description="Hot-deploy javascript files (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/js" granularity="0" verbose="true">
            <fileset dir="${web.dir}/js"/>
        </sync>
    </target>
  
    <target name="css-hot-deploy" description="Hot-deploy css files (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/css" granularity="0" verbose="true">
            <fileset dir="${web.dir}/css"/>
        </sync>
    </target>
    
    <target name="image-hot-deploy" description="Hot-deploy image files (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/images" granularity="0" verbose="true">
            <fileset dir="${web.dir}/images"/>
        </sync>
    </target>
  
    <target name="front-end-hot-deploy" depends="ftl-hot-deploy, js-hot-deploy, css-hot-deploy, image-hot-deploy"
            description="Hot-deploy ftl, js, and css files (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/css" granularity="0" verbose="true">
            <fileset dir="${web.dir}/css"/>
        </sync>
    </target>
    
    <!-- ================================================================= -->
    <!-- Test targets -->
    <target name="build-tests" description="Compile Java tests">
        <delete dir="${build.dir}/test"/>
        <mkdir dir="${build.dir}/test"/>
        <javac destdir="${build.dir}/test" source="1.8" target="1.8" debug="true"
            deprecation="false" optimize="false" failonerror="true">
            <src path="${test.dir}"/>
            <classpath refid="test-classpath"/>
        </javac>
        <!-- copy spring context to service test classes dir -->
        <copy file="${web.dir}/WEB-INF/service-test-context.xml" tofile="${build.dir}/test/com/filth/service/service-test-context.xml"/>
    </target>
    
    <target name="tests" depends="build, build-tests" description="Run tests">
        <junit printsummary="on"
               fork="yes"
               forkmode="perBatch"
               haltonfailure="false"
               failureproperty="tests.failed"
               showoutput="true">
            <classpath refid="test-classpath"/>
            <formatter type="brief" usefile="false"/>
            
            <batchtest>
                <fileset dir="${build.dir}/test">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
        
        <fail if="tests.failed">
            tests.failed=${tests.failed}
            ***********************************************************
            ***********************************************************
            ****  One or more tests failed!  Check the output ...  ****
            ***********************************************************
            ***********************************************************
        </fail>
    </target>
    
    <target name="load-test-data" description="Drops and creates the test database, and loads test data.">
        <exec executable="${scripts.dir}/drop_and_create_filth_test_db.sh" />
    </target>
    
    <target name="test-deploy" depends="build, create-app-jar" description="Deploy application as a WAR (.war) file for TESTING (i.e. pointing to a database with test data)">
        <war destfile="${tomcat.deploy.dir}/${project.name}.war" webxml="${web.dir}/WEB-INF/web-test.xml">
            <fileset dir="${web.dir}" excludes="**/web.xml, **/filth-servlet.xml, **/web-test.xml">
                <include name="**/*.*"/>
            </fileset>
        </war>
    </target>
    
    <!-- ================================================================= -->
    <!-- Misc targets -->
    <target name="refresh" depends="ivy-clean, ivy-resolve, tomcat-clean, deploy"
            description="Cleans dependencies and deployment, then rebuilds and deploys"/>

</project>
