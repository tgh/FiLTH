<?xml version="1.0"?>

<project name="filth" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

    <!-- ================================================================= -->
    <!-- Properties and classpaths -->
    <property environment="env"/>
    
    <property file="build.properties"/>
    <property file="conf/${project.name}.properties"/>
    
    <!-- If the "method" property is not set (-Dmethod) for the test-one target, initialize to empty -->
    <!-- (if we don't, junit-explicit will see the value '${method}' (intead of the expected "") -->
    <!-- for that parameter, resulting in no tests run) -->
    <property name="method" value="" />
    
    <!-- paths -->
    <property name="src.main.dir" value="src/main/java"/>
    <property name="src.test.dir" value="src/test"/>
    <property name="test.resources.dir" value="${src.test.dir}/resources"/>
    <property name="test.results.dir" value="test-results"/>
    <property name="web.dir" value="web"/>
    <property name="build.main.dir" value="build/main"/>
    <property name="build.test.dir" value="build/test"/>
    <property name="unit.test.classes.dir" value="${build.test.dir}/unit"/>
    <property name="service.test.classes.dir" value="${build.test.dir}/service"/>
    <property name="build.test.dir" value="build/test"/>
    <property name="lib.dir" value="lib"/>
    <property name="ivy.report.dir" value="ivy-report"/>
    <property name="scripts.dir" value="scripts"/>
    
    <property name="tests.include" value="**/*Test.class"/>

    <path id="master.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <!-- include servlet API classes: -->
        <fileset dir="${tomcat.lib.dir}">
            <include name="servlet*.jar"/>
        </fileset>
    </path>
    
    <path id="test.classpath">
        <path refid="master.classpath"/>
        <pathelement path="${build.main.dir}"/>
        <pathelement path="${build.test.dir}"/>
        <!-- TD: service tests need, for example spring-orm's LocalSessionFactorBean at runtime, -->
        <!-- but we probably should include *all* runtime jars? -->
        <fileset dir="${web.dir}/WEB-INF/lib">
            <include name="**/*.jar"/>
        </fileset>
        <!-- Need to include the logging configuration for running tests -->
        <!-- (otherwise running tests will result in *a ton* of DEBUG output) --> 
        <pathelement path="${test.resources.dir}"/>
        <!-- TD: extend test.classpath to test.unit.classpath and test.service.classpath and place each if these in their respective classpath -->
        <pathelement path="${service.test.classes.dir}"/>
        <pathelement path="${unit.test.classes.dir}"/>
    </path>
    
    <!-- ================================================================= -->
    <!-- Ivy -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement path="${ant.home.dir}/lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>
    
    <target name="ivy-clean" description="Remove all dependencies retrieved from Ivy">
        <delete dir="${lib.dir}" includeemptydirs="true" failonerror="true" />
        <delete dir="${web.dir}/WEB-INF/lib" includeemptydirs="true" failonerror="true" />
    </target>
    
    <target name="ivy-resolve" description="Get dependencies using Ivy">
        <ivy:configure />
        
        <!-- resolve compile-time dependencies into a directory from which 'build' will use during compilation -->
        <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].[ext]" type="jar,bundle" conf="compile"/>
        <!-- resolve runtime dependencies into a directory from which 'deploy' will copy to tomcat -->
        <ivy:retrieve pattern="${web.dir}/WEB-INF/lib/[artifact]-[revision].[ext]" type="jar,bundle" conf="runtime"/>
    </target>

    <target name="ivy-report" depends="ivy-clean" description="Output a detailed html Ivy report to ${ivy.report.dir}">
        <ivy:resolve />
        <ivy:report todir="${ivy.report.dir}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Tomcat -->
    <target name="tomcat-clean" description="Removes the project from tomcat">
        <delete dir="${tomcat.deploy.dir}/${project.name}" includeemptydirs="true" />
        <delete file="${tomcat.deploy.dir}/${project.name}.war" failonerror="false" />
    </target>

    <target name="tomcat-start" description="Start tomcat">
        <exec executable="bash" failonerror="true">
            <arg value="${tomcat.home.dir}/bin/catalina.sh"/>
            <arg value="start"/>
        </exec>
    </target>
    
    <target name="tomcat-debug-start" description="Start tomcat with debugging turned on">
        <exec executable="bash" failonerror="true">
            <arg value="${tomcat.home.dir}/bin/catalina.sh"/>
            <arg line="jpda start"/>
            <env key="JPDA_ADDRESS" value="${tomcat.jpda.address}"/>
            <!-- <env key="JAVA_OPTS" value="${tomcat.java.opts}"/> --><!-- uncomment if you want to use specific options for the jvm -->
        </exec>
    </target>
    
    <target name="tomcat-stop" description="Stop tomcat">
        <exec executable="bash" failonerror="true">
            <arg value="${tomcat.home.dir}/bin/catalina.sh"/>
            <arg value="stop"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Build targets -->
    <target name="build" description="Compile main source tree java files">
        <delete dir="${build.main.dir}"/>
        <mkdir dir="${build.main.dir}"/>
        <javac destdir="${build.main.dir}" source="1.8" target="1.8" debug="true"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${src.main.dir}"/>
            <classpath refid="master.classpath"/>
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- Deploy targets -->
    <target name="create-app-jar" description="Creates a jar file containing this project's compiled java source to be included in the deployed .war file">
        <jar
            basedir="${build.main.dir}"
            destfile="${web.dir}/WEB-INF/lib/${project.name}.jar"
            update="false"
        />
    </target>

    <target name="deploy" depends="build, create-app-jar" description="Deploy application as a WAR (.war) file">
        <war destfile="${tomcat.deploy.dir}/${project.name}.war" webxml="${web.dir}/WEB-INF/web.xml">
            <fileset dir="${web.dir}">
                <include name="**/*.*"/>
            </fileset>
        </war>
    </target>
    
    <target name="ftl-hot-deploy" description="Hot-deploy freemarker templates (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/WEB-INF/view" granularity="0" verbose="true">
            <fileset dir="${web.dir}/WEB-INF/view"/>
        </sync>
    </target>
  
    <target name="js-hot-deploy" description="Hot-deploy javascript files (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/js" granularity="0" verbose="true">
            <fileset dir="${web.dir}/js"/>
        </sync>
    </target>
  
    <target name="css-hot-deploy" description="Hot-deploy css files (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/css" granularity="0" verbose="true">
            <fileset dir="${web.dir}/css"/>
        </sync>
    </target>
    
    <target name="image-hot-deploy" description="Hot-deploy image files (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/images" granularity="0" verbose="true">
            <fileset dir="${web.dir}/images"/>
        </sync>
    </target>
  
    <target name="front-end-hot-deploy" depends="ftl-hot-deploy, js-hot-deploy, css-hot-deploy, image-hot-deploy"
            description="Hot-deploy ftl, js, and css files (deploy while tomcat is running)">
        <sync todir="${tomcat.deploy.dir}/${project.name}/css" granularity="0" verbose="true">
            <fileset dir="${web.dir}/css"/>
        </sync>
    </target>
    
    <!-- ================================================================= -->
    <!-- Test targets and macros -->
    <macrodef name="junit-explicit">
        <attribute name="label" />
        <attribute name="classpathref" />
        <attribute name="disable-cache" default="false" />
        <attribute name="method" default="" />
        <!-- these are the <filesets> nested in calls of this macro -->
        <element name="junit-filesets" implicit="true" optional="false" />
        <sequential>
            <condition property="remoteDebugJvmArgs"
                value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=${tomcat.jpda.address}"
                else="-ea">
                <istrue value="${debug}"/>
            </condition>

            <junit fork="yes"
                   forkmode="perBatch"
                   haltonfailure="false"
                   haltonerror="false"
                   printsummary="on"
                   showoutput="yes"
                   failureproperty="junit.failed"
            >
                <!-- The specific test method to run -->
                <sysproperty key="test.method" value="@{method}" />
                <!-- Disable ehCache for batch testing! -->
                <sysproperty key="net.sf.ehcache.disabled" value="@{disable-cache}" />
                <formatter type="brief" />
                <formatter type="xml" />

                <classpath refid="@{classpathref}" />
                <jvmarg value="${remoteDebugJvmArgs}"/>
                <jvmarg value="-Xmx768m" />
                <jvmarg value="-Dfile.encoding=utf8" />
                <jvmarg value="-XX:-UseGCOverheadLimit" />
                <batchtest todir="${test.results.dir}">
                    <junit-filesets />
                </batchtest>
            </junit>
            
            <if>
                <istrue value="${junit.failed}" />
                <then>
                    <concat>
                        <header filtering="no" trimleading="yes">
                              TEST FAILURES
                              =============
                        </header>
                        <fileset dir="${test.results.dir}" includes="TEST-*.txt" />
                        <filterchain>
                            <linecontainsregexp>
                                <regexp pattern="Testcase.*(ERROR|FAILED)" />
                            </linecontainsregexp>
                        </filterchain>
                    </concat>
                   <fail message="@{label} failed" />
               </then>
            </if>
        </sequential>
    </macrodef>
    
    <macrodef name="junit-standard">
        <attribute name="label" />
        <attribute name="classpathref" />
        <attribute name="testdir" />
        <attribute name="disable-cache" default="false"/>
        <sequential>
            <junit-explicit
                label="@{label}"
                classpathref="@{classpathref}"
                disable-cache="@{disable-cache}"
            >
                <fileset
                    dir="@{testdir}"
                    includes="${tests.include}"
                />
            </junit-explicit>
        </sequential>
    </macrodef>
    
    <target name="test-clean" description="Delete all test classes and result files">
        <delete dir="${build.test.dir}"/>
        <delete dir="${test.results.dir}"/>
    </target>
    
    <target name="compile-tests" depends="test-clean" description="Compile all Java test files">
        <mkdir dir="${build.test.dir}"/>
        <mkdir dir="${unit.test.classes.dir}"/>
        <mkdir dir="${service.test.classes.dir}"/>
        <mkdir dir="${test.results.dir}"/>

        <macrodef name="javac-tests">
            <attribute name="srcdir" />
            <attribute name="destdir" />
            <sequential>
                <if>
                    <available file="@{srcdir}" />
                    <then>
                        <javac
                            srcdir="@{srcdir}"
                            destdir="@{destdir}"
                            classpathref="test.classpath"
                            deprecation="off"
                            debug="true"
                            optimize="false"
                            source="1.8"
                            target="1.8"
                            encoding="UTF-8"
                            includeantruntime="no"
                        >
                        </javac>
                    </then>
                </if>
            </sequential>
        </macrodef>

        <!-- Compile the unit tests -->
        <javac-tests srcdir="${src.test.dir}/unit" destdir="${unit.test.classes.dir}" />
        <!-- Compile the service tests -->
        <javac-tests  srcdir="${src.test.dir}/service" destdir="${service.test.classes.dir}" />
    </target>

    <target name="build-tests" depends="test-clean, compile-tests" description="Setup required files for testing">
        <!-- Copy spring context to service test classes dir -->
        <copy file="${web.dir}/WEB-INF/service-test-context.xml" tofile="${service.test.classes.dir}/service-test-context.xml"/>
    </target>
    
    <target name="all-tests" depends="unit-tests, service-tests" description="Run all tests" />
    
    <target name="unit-tests" depends="build, build-tests" description="Runs all unit tests">
        <junit-standard
            label="Unit tests"
            testdir="${unit.test.classes.dir}"
            classpathref="test.classpath"
            disable-cache="true"
        />
    </target>
    
    <target name="service-tests" depends="build, build-tests" description="Runs all service tests">
        <junit-standard
            label="Service tests"
            testdir="${service.test.classes.dir}"
            classpathref="test.classpath"
            disable-cache="true"
        />
    </target>
    
    <target name="test-one" depends="build, build-tests"
            description="Run a single test--i.e. one java *Test class. Required arg: -Dtest=[java test class]; optional args: -Dmethod=[method name] to run a specific method in the test class, -Ddebug=true to turn on remote debugging">
        <junit-explicit label="Cherry-picked tests" classpathref="test.classpath" disable-cache="true" method="${method}">
            <fileset dir="${unit.test.classes.dir}" includes="**/${test}.class" />
            <fileset dir="${service.test.classes.dir}" includes="**/${test}.class" />
        </junit-explicit>
    </target>
    
    <target name="load-test-data" description="Drops and creates the test database, and loads test data.">
        <exec executable="${scripts.dir}/drop_and_create_filth_test_db.sh" />
    </target>
    
    <target name="test-deploy" depends="build, create-app-jar" description="Deploy application as a WAR (.war) file for TESTING (i.e. pointing to a database with test data)">
        <war destfile="${tomcat.deploy.dir}/${project.name}.war" webxml="${web.dir}/WEB-INF/web-test.xml">
            <fileset dir="${web.dir}" excludes="**/web.xml, **/filth-servlet.xml, **/web-test.xml">
                <include name="**/*.*"/>
            </fileset>
        </war>
    </target>
    
    <!-- ================================================================= -->
    <!-- Misc targets -->
    <target name="refresh" depends="ivy-clean, ivy-resolve, tomcat-clean, deploy"
            description="Cleans dependencies and deployment, then rebuilds and deploys"/>

</project>
