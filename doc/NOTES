WHERE LEFT OFF
---------------
- need to add inserting oscar_given_to.sql in drop_and_delete...



NEEDS
------
- all entity tables need to be inserted before any relationship tables


IDEAS/THOUGHTS
---------------
- change list_contains pkey? (I'm sure there's going to be some lists that have
  the same movie on it 2 or more times...)

- crewperson f_name and m_name can be NULL, so names such as Cher and Madonna
  are last names.

- for the web app, the lists will be pdf files linked from the home page (?)

- shouldn't contain accented special characters for names, movie titles, etc.
  because typing in a search query in the front-end won't find them if not
  given (just using non-accented characters).  Unless search by pull-down menu?
  EDIT: there are search mechanisms (at least in Postgres) that WILL catch these
  accented characters I think...

- can have the Front-End take care of certain constraints when inserting/
  updating new data (movie year is between 1900 and 3+ years from current year,
  for example).  When adding a country, or star rating, or something like that,
  the check constraint must be updated (e.g. the range of values accepted).
  If sqlite is used, however, this is not possible.  So, one way is to remove
  the check constraints in the database, and use the front-end to check input
  before insert/update.  For a value range upper limit that might change (e.g.
  when adding a new country), the FiLTH application could do a sql query upon
  load for the highest value of movie.country and store that in a variable, or
  have some sort of config or rc file that it reads/updates for such variables.

- should 'position' attribute of worked_on be a part of the primary key (so
  when a person has multiple positions in a movie--actor/director, for example
  --each instance is a unique tuple) or not (so that a person that worked on a
  movie only appears once in the table (e.g. position value "Director, Actor")?

- Front-end must ensure spelling consistency when entering position values

- add category to oscar_given_to table and make it a foreign key to the
  oscar table (like country is to movie) to eliminate anohter join.  This will
  add significant storage, however.

- add year attribute to oscar_given_to table.  This will eliminate the
  need for dummy records.  OscarParser will have to ask user for year of movie
  (maybe just for foreign and maybe documentary films?), and have to insert
  year into the sql insert statements. Db schema would need updated as well.

- change search for movie in OscarParser to only look at title and not year,
  then when outputting the matches, output the year as well. ??

- change schema: crew_person should have an attribute for what they are (actor,
  director, etc)--probably a small integer (like what is done for MPAA in the
  movie table), which would mean having multiple records for certain persons
  (such as Clint Eastwood, Matt Damon, Orson Welles, etc), and remove position
  attribute from worked_on table

- if you do use integers for data such as MPAA, country, position, star rating,
  etc., maybe there should be a config or settings file for the front-end to be
  read in at load time for translating the integers ??

- list_contains's primary key and/or schema may need to be changed: there should
  be more flexibility so that a movie can be on a list more than once...


HELPFUL HINTS/REMINDERS
------------------------
- password for filth database: 0o9..

- to connect to the database with psql:

  $ psql -U postgres -d filth

- compile haskell just like common gcc: ghc -o [binary] [source]
- example of full text search in postgres:

  SELECT mid, title FROM movie WHERE to_tsquery('Dr.&Strangelove&Bomb')
  @@ to_tsvector(title);
  -- the '@@' operator means 'matches'
  -- to_tsquery has special characters:
  --  & = and
  --  | = or
  --  ! = not

- example of search for name with accented character using the created function
  to_ascii():

  select * from crew_person where f_name =
  to_ascii(convert_to('Pen√©lope', 'latin1'), 'latin1');


REFERENCES
-----------
- csv file of oscar history found here:
  http://www.aggdata.com/awards/oscar
  from here:
  http://www.bloggersblog.com/blog/224081
- data from IMDB can be retrieved directly! : http://www.imdb.com/interfaces/


TOOLS USED/TRIED OUT
---------------------
* denotes possible requirements for end user
- Dia (diagram tool--used for E-R diagram for database schema)
- Git (for version control)
- Postgres* (database)
- pgAdmin III (front-end application for Postgres)
- MySQL (database)
- MySQL Workbench (front-end application for MySQL)
- wxGlade (GUI builder for Python)
- BoaConstructor (GUI builder for Python)
- NetBeans GUI builder (GUI builder for Java)
- antiword (movie shell script)
- sed (shell scripts)
- fgrep (oscarGivenTo shell script)
- ghc (Haskell compiler)
- gcc (C compiler)
- python* (interpreter for Python)
- LaTeX* (typesetting tool--for dynamically creating pdf files)
- dvipdf* (used with LaTex for converting dvi files to pdf files)
- Photoshop (used to create FiLTH logo)


LANGUAGES USED
---------------
- bash shell scripting
- Python
- Java
- C
- Haskell
- PHP
- SQL
- HTML
- LaTeX


SCRATCH
--------
