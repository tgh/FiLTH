WHERE LEFT OFF
---------------
- new movie.sh
  - need to output modifications to temporary [table]_additions.sql files
  - have movie.sh run psql on these additions.sql files
  - append the additions.sql files to the real sql files
  - delete or wipe the modifications.sql files once modifications are persisted in db
  - need to tie it all together and test
- maybe whittle down the number of nominees I have for my awards (e.g. best scene 2003)
- update README for filmography stuff

- ALSO: look at shell scripts in Dropbox work directory (array usage, use of
  color for "usage" output, etc)


HOW TO
-------
- to start/stop/restart apache:

	$ sudo /etc/init.d/apache2 [start|stop|restart]

- to start tomcat:

	$ ~/workspace/tomcat/bin/catalina.sh start
	
- to check apache:
	- go to url: localhost
- to check tomcat:
	- got to url: localhost:8080


SETTING UP ENVIRONMENT
-----------------------
- I installed ant like this at first:
	- download tarball from http://httpd.apache.org/download.cgi#apache24
	- extract tarball to ~/apache
	- install Apache Portable Runtime project (APR)
	  - download tarballs apr-1.4.6.tar.gz and apr-util-1.4.1.tar.gz from http://apr.apache.org/download.cgi
	  - extract them to ~/apache/srclib/apr and ~/apache/srclib/apr-util, respectively
	- install prce (Perl Compatible Regular Expressions)
	  - download zip file from http://sourceforge.net/projects/pcre/files/pcre/
	  - extract to ~/pcre-8.30
	  - run configure; make; sudo make install in pcre-8.30
	- in ~/apache: $ configure --with-included-apr --prefex=/home/tgh/Installed_Programs/apache_2.4
	- in ~/apache: $ make
	- in ~/apache: $ sudo make install
	- add ~/Installed_Programs/apache_2.4/bin to $PATH
		
- for seting up Apache, Tomcat, see /doc/setup/Native_Environment_Setup.html

- download Spring from http://www.springsource.org/download
	- extract to workspace
- download Hibernate from http://www.hibernate.org/downloads
	- extract to workspace
- download Freemkarker from http://freemarker.sourceforge.net/freemarkerdownload.html
	- extract freemarker.jar from /lib

- Used tutorial: http://static.springsource.org/docs/Spring-MVC-step-by-step/part1.html
  for some of the setup
  - had to replace
  
  		<taskdef name="install" classname="org.apache.catalina.ant.InstallTask">
  		
  	with
  	
  		<taskdef name="install" classname="org.apache.catalina.ant.DeployTask">
  		
  	because InstallTask was deprecated after Tomcat 6, and I'm using Tomcat 7
  	
  - had to replace
  
        <path id="catalina-ant-classpath">
            <!-- We need the Catalina jars for Tomcat -->
            <!--  * for other app servers - check the docs -->
            <fileset dir="${appserver.lib}">
                <include name="catalina-ant.jar"/>
            </fileset>
        </path>
        
    with
    
        <path id="catalina-ant-classpath">
            <!-- We need the Catalina jars for Tomcat -->
            <!--  * for other app servers - check the docs -->
            <fileset dir="${appserver.lib}">
               <include name="catalina-ant.jar"/>
               <include name="tomcat-coyote.jar"/>
               <include name="doc/NOTEStomcat-util.jar"/>
            </fileset>
            <fileset dir="${appserver.home}/bin">
               <include name="tomcat-juli.jar"/>
            </fileset>
    
        </path>


NEEDS
------
- all entity tables need to be inserted before any relationship tables


IDEAS/THOUGHTS
---------------
- change list_contains pkey? (I'm sure there's going to be some lists that have
  the same movie on it 2 or more times...)

- for the web app, the lists will be pdf files linked from the home page (?)

- shouldn't contain accented special characters for names, movie titles, etc.
  because typing in a search query in the front-end won't find them if not
  given (just using non-accented characters).  Unless search by pull-down menu?
  EDIT: there are search mechanisms (at least in Postgres) that WILL catch these
  accented characters I think...

- add category to oscar_given_to table and make it a foreign key to the
  oscar table (like country is to movie) to eliminate another join.  This will
  add significant storage, however. (ditto for tyler_given_to)

- rather than run psql straight on oscar_given_to.sql, should drop_and_...sh
  scripts run OscarParser first, then run oscar_given_to.sql?

- with regard to ticket #19 (links to imdb), you could use this format for the
  URL: http://www.imdb.com/search/title?release_date=[year-1],[year+1]&title=[title with words separated by "%20"]

  for example, The Shawshank Redemption:

  http://www.imdb.com/search/title?release_date=1993,1995&title=The%20Shawshank%20Redemption

  There are more attributes to narrow the search, such as genres, MPAA rating,
  etc but this should be enough.  Besides, some of the MPAA ratings in filth is
  a little different than in IMDB (e.g. those films that were made before MPAA
  existed), and which genres in filth would be used?

  However, this still does not take you directly to the movie page, but a search
  results page, which is what I'm trying to avoid.

- sorting on star_rating has undesired results now that it is test rather than
  integer
  ? use "C" locale
  ? create a Comparator for star ratings (maybe make star ratings an enum?)

- Ticket #71: creating a more agile environment...
  - create a new spreadsheet for stories based on tickets.ods
    - add columns for level (1: high, 2: medium, 3:low, 4:nice-to-have low,
      5:nice-to-have medium, 6:nice-to-have high), points estimated, tasks #
      (e.g. if Story #21, then tesk 21.1, 21.2, 21.3, etc)
  - description will be like wgen story format: "As ... I would like ... " etc
    - S19 description: As an end user, I would like the movie results of a
      search in filth to be a URL link to the movie's IMDB page.
  - need to doc bug statuses, bug levels, story statuses, etc
  - create a bug spreadsheet
    - b1
      - status: O
      - level: 3
      - description: For whatever reason, Python does not handle unicode well.
        This kind of error happens frequently.  This was a simple update of a
        title of a movie, and dealt only with ascii characters, but it still
        barfed on unicode?
      - example:

        was updating "Hannah" to "Hanna" and received this output:

        (21:49)tgh:~/workspace/FiLTH/scripts[master]$ ./movie.sh 

          Did not find <"Hanna" (2011) **½ [PG-13] USA> in the database.
          Is this an update? (y/n) y

          What is the id of the movie? 704
          Traceback (most recent call last):
            File "/home/tgh/workspace/FiLTH/scripts/movie2sql.py", line 230, in <module>
              insert = not checkForUpdate(title, year, stars, mpaa, country.replace("'",""))
            File "/home/tgh/workspace/FiLTH/scripts/movie2sql.py", line 140, in checkForUpdate
              search  = "'{0}', {1}, '{2}', '{3}', '{4}'".format(origTitle.encode('utf-8').replace("'","''").replace("/","\/"), origYear, origStars.encode('utf-8').replace("*","\*"), origMpaa, origCountry)
          UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 2: ordinal not in range(128)


HELPFUL HINTS/REMINDERS
------------------------
- it takes 2 bytes to make ½ character: '\xc2\xbd'

- password for filth database: 0o9..

- to connect to the database with psql:

  $ psql -U postgres -d filth

- compile haskell just like common gcc: ghc -o [binary] [source]
- example of full text search in postgres:

  SELECT mid, title FROM movie WHERE to_tsquery('Dr.&Strangelove&Bomb')
  @@ to_tsvector(title);
  -- the '@@' operator means 'matches'
  -- to_tsquery has special characters:
  --  & = and
  --  | = or
  --  ! = not

- example of search for name with accented character using the created function
  to_ascii():

  select * from crew_person where f_name =
  to_ascii(convert_to('Penélope', 'latin1'), 'latin1');

- crew persons with one name (e.g. Cher, Costa-Gavras) have their names in the
  db as last names

- in Postgres, the output of an insert is:
  "INSERT <OID of the new row> <the number of rows inserted>"
  e.g.
  INSERT 0 1

- to create the db schema diagram
  - open DbVis
  - right click on Filth (in the left window panel) -> connect
  - expand the "filth" db (by clicking the little lever icon left of "filth")
  - expand "public"
  - click "TABLE"
  - in the main window frame, click "References" tab
  - arrange diagram how you want
  - zoom in to the level of resolution you want
  - click the export button below and to the left of "References" tab
  
- apache2 is located in /etc/apache2, where you'll find files such as
	- apache2.conf (also specifies where the log files are located)
	- httpd.conf
	
- ant is located in /usr/share/ant

- tomcat is located in ~/workspace/tomcat

- Java is located in /usr/lib/jvm/java-6-sun-1.6.0.26

- Possible MPAA rating changes:

    a clockwork orange
    midnight cowboy
    lenny
    last tango in paris
    little big man
    le boucher
    walkabout
    my life as a dog
    the passenger (pg or pg-13)
    planet of the apes (nr or g)
    requiem for a dream (nr or nc-17 or r)
    romeo and juliet (g or pg)
    romper stomper (r or nc-17)
    santa sangre (r or nr or nc-17)
    straw dogs (r or x)
    thx-1138 (r or pg)
    bananas (pg-13 or pg)

- Creating year csv files:

  first:
  sed -i 's/^  //g'
  sed -i '/^$/d'

  then manually place the category names in front of each line (followed by a comma)

  then run:
  sed -i "s/^/2008,/g" 2008.csv;
  sed -i "s/[0-9][0-9]\. //g" 2008.csv;
  sed -i "s/[0-9]\. //g" 2008.csv;
  sed -i "s/\(2008,Top Ten.*\)/\1,,0,/g" 2008.csv;
  sed -i "s/\(2008,Best Pictu.*\)/\1,,0,/g" 2008.csv;
  sed -i "s/\(2008,Best.*Act.*\)/\1,0,/g" 2008.csv;
  sed -i "s/\(2008,Best Director.*\)/\1,0,/g" 2008.csv;
  sed -i "s/\(2008,Best.*Screenplay.*\)/\1,,0,/g" 2008.csv;
  sed -i "s/\(2008,Best Cinemato.*\)/\1,,0,/g" 2008.csv;
  sed -i "s/\(2008,Worst.*\)/\1,,0,/g" 2008.csv;
  sed -i "s/\(.*\)\* \(.*\)0\(.*\)/\1\21\3/g" 2008.csv;
  sed -i 's/\(.*Best Actor\),\(.*\) in "\(.*\)" and "\(.*\)"/\1,\3|\4,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Actor\),\(.*\) in "\(.*\)"/\1,\3,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Supporting Actor\),\(.*\) in "\(.*\)" and "\(.*\)"/\1,\3|\4,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Supporting Actor\),\(.*\) in "\(.*\)"/\1,\3,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Actress\),\(.*\) in "\(.*\)" and "\(.*\)"/\1,\3|\4,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Actress\),\(.*\) in "\(.*\)"/\1,\3,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Supporting Actress\),\(.*\) in "\(.*\)" and "\(.*\)"/\1,\3|\4,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Supporting Actress\),\(.*\) in "\(.*\)"/\1,\3,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Director\),\(.*\) for "\(.*\)" and "\(.*\)"/\1,\3|\4,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Director\),\(.*\) for "\(.*\)"/\1,\3,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Scene\),"\(.*\)" in \(.*\)/\1,\3,,0,\2/g' ./2007.csv;
  sed -i 's/\(.*Best Scene\),\* "\(.*\)" in \(.*\)/\1,\3,,1,\2/g' ./2007.csv;

  then:
  - manually put the positions of top ten
  - manually enter nominee names for cinematography, screenplays

** If there are problems connecting to the database, it might be due to changes
  in /opt/PostgreSQL/9.0/data/pg_hba.conf for working from home.

  I changed the last two lines of data to use METHOD "trust" instead of "md5"
  which is what is was before.

- installed SpringSource Tool (in ~/Installed_Programs/springsource/sts-3.1.0.RELEASE)

- using groups in sed:
  - wrap groups in escaped parens, e.g. \([group]\)
  - use an escaped index to reuse the group, e.g. \1 \2
  - index starts at 1, and is read from left to right
    - so, for example, in "s/Name: \(.*\), Id: \([0-9][0-9]\)/\1 (\2)/g", \1 refers to the group ".*" and \2 refers to "[0-9][0-9]"



REFERENCES
-----------
- csv file of oscar history found here:
  http://www.aggdata.com/awards/oscar
  from here:
  http://www.bloggersblog.com/blog/224081
- data from IMDB can be retrieved directly! : http://www.imdb.com/interfaces/


TOOLS USED/TRIED OUT
---------------------
* denotes possible requirements for end user
- Dia (diagram tool--used for E-R diagram for database schema)
- Git (for version control)
- Postgres* (database)
- pgAdmin III (front-end application for Postgres)
- MySQL (database)
- MySQL Workbench (front-end application for MySQL)
- wxGlade (GUI builder for Python)
- BoaConstructor (GUI builder for Python)
- NetBeans GUI builder (GUI builder for Java)
- antiword (movie shell script)
- sed (shell scripts)
- fgrep (oscarGivenTo shell script)
- ghc (Haskell compiler)
- gcc (C compiler)
- python* (interpreter for Python)
- LaTeX* (typesetting tool--for dynamically creating pdf files)
- dvipdf* (used with LaTex for converting dvi files to pdf files)
- Photoshop (used to create FiLTH logo)
- Qt Creator
- sqlite3
- Django
- SQLAlchemy
- dbvis (creating db schema diagram)


LANGUAGES USED
---------------
- bash shell scripting
- Python
- Java
- C
- Haskell
- PHP
- SQL
- HTML
- LaTeX


SCRATCH
--------

--query for all oscars
select m.title, m.year, m.star_rating, m.country, o.ocategory, c.f_name, c.m_name, c.l_name, ogt.ostatus
from movie m join oscar_given_to ogt using (mid) join oscar o using (oid) join crew_person c using (cid)
order by m.year, o.ocategory, c.l_name;

--how many oscar nominations have I seen?
select count(*)
from movie join oscar_given_to using (mid) join oscar using (oid)
where movie.star_rating <> 'not seen';

--how many oscar nominations are there?
select count(*)
from movie join oscar_given_to using (mid) join oscar using (oid);
