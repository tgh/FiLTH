WHERE LEFT OFF
---------------

- fixing unicode issues with movie2sql.py and models.py...
- change Text types in models.py to Unicode for some attributes
- add unique key to movie in models.py
- need to update README "Files" section
- add code to OscarParser to create worked_on.sql
- I dropped and created test db and it has 1 less movie that filth??? need to
  rerun OscarParser after filth is dropped and created?
- ½ is in database (in" 8½") -- might cause problems in Python (w/unicode)
- rather than run psql straight on oscar_given_to.sql, should drop_and_...sh
  scripts run OscarParser first, then run oscar_given_to.sql


NEEDS
------
- all entity tables need to be inserted before any relationship tables


IDEAS/THOUGHTS
---------------
- change list_contains pkey? (I'm sure there's going to be some lists that have
  the same movie on it 2 or more times...)

- for the web app, the lists will be pdf files linked from the home page (?)

- shouldn't contain accented special characters for names, movie titles, etc.
  because typing in a search query in the front-end won't find them if not
  given (just using non-accented characters).  Unless search by pull-down menu?
  EDIT: there are search mechanisms (at least in Postgres) that WILL catch these
  accented characters I think...

- add category to oscar_given_to table and make it a foreign key to the
  oscar table (like country is to movie) to eliminate another join.  This will
  add significant storage, however. (ditto for tyler_given_to)


HELPFUL HINTS/REMINDERS
------------------------
- password for filth database: 0o9..

- to connect to the database with psql:

  $ psql -U postgres -d filth

- compile haskell just like common gcc: ghc -o [binary] [source]
- example of full text search in postgres:

  SELECT mid, title FROM movie WHERE to_tsquery('Dr.&Strangelove&Bomb')
  @@ to_tsvector(title);
  -- the '@@' operator means 'matches'
  -- to_tsquery has special characters:
  --  & = and
  --  | = or
  --  ! = not

- example of search for name with accented character using the created function
  to_ascii():

  select * from crew_person where f_name =
  to_ascii(convert_to('Penélope', 'latin1'), 'latin1');

- crew persons with one name (e.g. Cher, Costa-Gavras) have their names in the
  db as last names

- in Postgres, the output of an insert is:
  "INSERT <OID of the new row> <the number of rows inserted>"
  e.g.
  INSERT 0 1


REFERENCES
-----------
- csv file of oscar history found here:
  http://www.aggdata.com/awards/oscar
  from here:
  http://www.bloggersblog.com/blog/224081
- data from IMDB can be retrieved directly! : http://www.imdb.com/interfaces/


TOOLS USED/TRIED OUT
---------------------
* denotes possible requirements for end user
- Dia (diagram tool--used for E-R diagram for database schema)
- Git (for version control)
- Postgres* (database)
- pgAdmin III (front-end application for Postgres)
- MySQL (database)
- MySQL Workbench (front-end application for MySQL)
- wxGlade (GUI builder for Python)
- BoaConstructor (GUI builder for Python)
- NetBeans GUI builder (GUI builder for Java)
- antiword (movie shell script)
- sed (shell scripts)
- fgrep (oscarGivenTo shell script)
- ghc (Haskell compiler)
- gcc (C compiler)
- python* (interpreter for Python)
- LaTeX* (typesetting tool--for dynamically creating pdf files)
- dvipdf* (used with LaTex for converting dvi files to pdf files)
- Photoshop (used to create FiLTH logo)
- Qt Creator
- sqlite3
- Django
- SQLAlchemy


LANGUAGES USED
---------------
- bash shell scripting
- Python
- Java
- C
- Haskell
- PHP
- SQL
- HTML
- LaTeX


SCRATCH
--------
