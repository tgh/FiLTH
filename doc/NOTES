WHERE LEFT OFF
---------------
- add code to OscarParser to create worked_on.sql
- I dropped and created test db and it has 1 less movie that filth??? need to
  rerun OscarParser after filth is dropped and created?
- ½ is in database (in" 8½") -- might cause problems in Python (w/unicode)
- rather than run psql straight on oscar_given_to.sql, should drop_and_...sh
  scripts run OscarParser first, then run oscar_given_to.sql


NEEDS
------
- all entity tables need to be inserted before any relationship tables


IDEAS/THOUGHTS
---------------
- storing text values as ints (star rating, mpaa, etc) will cause a lot of
  function calls in the front end to convert these values to corresponding text
  (e.g. 8 -> "****" or 4 -> "R").  Also if any value is desired to be added to
  the domain of any of these attributes, the check constraint must be updated
  as well, which is sloppy ( would have to drop it, then add it again with the
  new maximum value allowed).  Thus, should we eliminate this convention and
  simply store '*', '***', '***½', 'R', 'PG', 'PG-13', etc into the database?
  This greatly increases occupied space on the disk, but it's not horrible.  If
  so, there would also have to be "integrity entities" as I call them that will
  insure no spelling errors are inserted (this is currently in use for
  attributes such as movie.country, crew_person.known_as, and
  worked_on.position).

- change list_contains pkey? (I'm sure there's going to be some lists that have
  the same movie on it 2 or more times...)

- crewperson f_name and m_name can be NULL, so names such as Cher and Madonna
  are last names.

- for the web app, the lists will be pdf files linked from the home page (?)

- shouldn't contain accented special characters for names, movie titles, etc.
  because typing in a search query in the front-end won't find them if not
  given (just using non-accented characters).  Unless search by pull-down menu?
  EDIT: there are search mechanisms (at least in Postgres) that WILL catch these
  accented characters I think...

- should 'position' attribute of worked_on be a part of the primary key (so
  when a person has multiple positions in a movie--actor/director, for example
  --each instance is a unique tuple)?  This is the way it is currently.
  Or should this not be the case (so that a person that worked on a movie onlys
  appears once in the table (e.g. position value "Director, Actor")?

- add category to oscar_given_to table and make it a foreign key to the
  oscar table (like country is to movie) to eliminate another join.  This will
  add significant storage, however. (ditto for tyler_given_to)

- if you do use integers for data such as MPAA, country, position, star rating,
  etc., maybe there should be a config or settings file for the front-end to be
  read in at load time for translating the integers ??

- list_contains's primary key and/or schema may need to be changed: there should
  be more flexibility so that a movie can be on a list more than once...


HELPFUL HINTS/REMINDERS
------------------------
- password for filth database: 0o9..

- to connect to the database with psql:

  $ psql -U postgres -d filth

- compile haskell just like common gcc: ghc -o [binary] [source]
- example of full text search in postgres:

  SELECT mid, title FROM movie WHERE to_tsquery('Dr.&Strangelove&Bomb')
  @@ to_tsvector(title);
  -- the '@@' operator means 'matches'
  -- to_tsquery has special characters:
  --  & = and
  --  | = or
  --  ! = not

- example of search for name with accented character using the created function
  to_ascii():

  select * from crew_person where f_name =
  to_ascii(convert_to('Penélope', 'latin1'), 'latin1');


REFERENCES
-----------
- csv file of oscar history found here:
  http://www.aggdata.com/awards/oscar
  from here:
  http://www.bloggersblog.com/blog/224081
- data from IMDB can be retrieved directly! : http://www.imdb.com/interfaces/


TOOLS USED/TRIED OUT
---------------------
* denotes possible requirements for end user
- Dia (diagram tool--used for E-R diagram for database schema)
- Git (for version control)
- Postgres* (database)
- pgAdmin III (front-end application for Postgres)
- MySQL (database)
- MySQL Workbench (front-end application for MySQL)
- wxGlade (GUI builder for Python)
- BoaConstructor (GUI builder for Python)
- NetBeans GUI builder (GUI builder for Java)
- antiword (movie shell script)
- sed (shell scripts)
- fgrep (oscarGivenTo shell script)
- ghc (Haskell compiler)
- gcc (C compiler)
- python* (interpreter for Python)
- LaTeX* (typesetting tool--for dynamically creating pdf files)
- dvipdf* (used with LaTex for converting dvi files to pdf files)
- Photoshop (used to create FiLTH logo)
- Qt Creator
- sqlite3
- Django
- SQLAlchemy


LANGUAGES USED
---------------
- bash shell scripting
- Python
- Java
- C
- Haskell
- PHP
- SQL
- HTML
- LaTeX


SCRATCH
--------
