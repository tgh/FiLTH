                              F i L T H
                     (Film Library of Tyler Hayes)

-------------------------------------------------------------------------------

History
--------
This project began as a school assignment in the Fall of '09.


Overall Description
--------------------
The goal of this project is to create a program that manages my movies--movies
I have seen, movies I want to see, filmographies, oscar winners/nominees, best-
of lists, etc--all in one place, rather than multiple documents.

In the end I hope it to be a GUI application with menus, buttons, forms, etc.
and/or a web app.


Files
------

/data (data files in various formats used to populate the database)

  2003.csv, 2004.csv, etc.

    Csv files containing my top ten and awards data for various years.

  best_film_scores.txt

    A list of films notable for their excellent scores.  Will probably be used
    to create a list in the database (there are tables called "list" and
    "list_contains" that model a list pertaining to movies).

  best_of_2000s.txt

    "Best of" lists for the 2000's.  Will probably be used to create lists in
    the database (there are tables called "list" and "list_contains" that model
    a list pertaining to movies).

  ebert_top_ten.txt

    Roger Ebert's annual top ten movie lists.  These will be re-created in the
    database with the "list" and "list_contains" tables. 

  Director_Filmographies.doc

    Word document of director filmographies.

  filmographies.csv

    Csv file of filmography data. Just a large handful of directors and a few
    actors.

  Movie_Ratings.doc

    Here is the document that got it all started.  This document (a Word
    document) lists all of the movies I have rated, along with their year,
    country, and MPAA ratings.  I thought not only would it be nice if there was
    a way to have new movie ratings be inserted appropriately automatically, but
    also if this data I was maintaining and perusing by hand could be queryable.
    Thus, FiLTH.  Of course, it has grown to include much more than the data
    that this document provides.  antiword is used to convert this document to
    plain text in the /scripts/movie.sh shell script, and then taken from there.
    (see /scripts/movie.sh)

  movies_seen.txt

    An ongoing list of 2005-present movies seen, as well as data for the "Tyler"
    awards (like oscars, but categories, nominees, and winners chosen by me).
    This will be used to create best-of lists in the database as well as data
    for the "tyler" and "tyler_given_to" tables.

  movies_to_see.txt

    Just a list of movies I would like to see.  There will most likely be a
    continually changing list in the database for movies to see.

  oscars.csv

    Raw data (in CSV format) of Oscars history from 1928-2008.  This file was
    found at this site: http://www.aggdata.com/awards/oscar, which was linked to
    from this site: http://www.bloggersblog.com/blog/224081.  The file contains
    all cateogories (even the specific name changes to the same categories),
    production companies, producers, character names, etc--in other words, a lot
    of stuff I don't want/need.  This file is used in the
    /scripts/oscarGivenTo.sh shell script where fgrep, grep, and sed are used to
    extract and massage what I want out of the data.  The resulting cleaned data
    is stored in /data/oscarsOfCategory.csv.  (see /scripts/oscarGivenTo.sh)

  oscarsOfCategory.csv

    This is a cleaned version of the data found in /data/oscars.csv, and used in
    the /scripts/oscarsGivenTo.sh shell script.  This data will be used to
    populate the oscar_given_to table in the database by being given to the
    /bin/OscarParser Java program as a command-line argument, which will then
    output sql insert statements to be redirected to produce
    /sql/oscar_given_to.sql.

  otherMovies.txt

    An ad hoc list of movies I have seen a long time ago, but have not been
    reviewed (and, thus, not in the Movie_Ratings.doc document).  As of now
    (11/22/11) this file is not in use for FiLTH.

  scenes_shots.txt

    Lists of notable scenes and shots in films.  This will probably be used to
    create lists in the database (there are tables called "list" and
    "list_contains" that model a list pertaining to movies).

  shot.txt

    Filmographies of cinematographers listed in the same format as actedin.txt
    and directed.txt.  This file will be used (as of now, 6/1/11, it has not
    been used) to help populate the worked_on table of the database.

  siskel_and_roeper_top_tens.txt

    Top ten movies of the year from Gene Siskel and Richard Roeper.  Will be
    used to create lists in the database (there are tables called "list" and
    "list_contains" that model a list pertaining to movies).

  Tyler's 100 Greatest Movies List.doc

    An old list representing what I think/thought are/were the greatest 100
    movies of all time.  This will be re-created in the database using the
    "list" and "list_contains" tables.

  wrote.txt

    Filmographies of screenwriters listed in the same format as actedin.txt,
    directed.txt, and shot.txt.  This file will be used (as of now, 6/1/11, it
    has not been used) to help populate the worked_on table of the database.

/doc (documentation)

  filth_schema.png

    Schema diagram for the filth database.

  front_end_requirements.txt

    Notes on what capabilites/functionalities are desired for FiLTH's user
    interface.

  NOTES

    Text file that acts as a kind of scratch pad for various notes regarding the
    FiLTH project.

  README

    This file.

/pdf (pdf files)

  movie_ratings.pdf

    PDF version of /data/Movie_Ratings.doc generated by
    /scripts/movie_ratings_to_pdf.sh shell script.  This version of the movie
    ratings do not include the MPAA rating or country of origin.

/scripts (as in programming scripts, not movie scripts)

  cop.sh

    Shell script that compiles /src/OscarParser.java into /bin/OscarParser.class

  crew2sql.py

    Python script that produces sql insert statements to populate the
    crew_person table of the database given a specifically formatted text file
    of names in the film industry.  This script is not used directly--it is used
    in the /scripts/crew_person.sh shell script (see below).

  crew_person.sh

    Shell script to populate the crew_person table of the database.  It first
    executes /bin/nameFormatter to format the names in /data/crew_person.txt and
    then feeds the output of nameFormatter to the /scripts/crew2sql.py Python
    script to produce the sql insert statements.  That output is then redirected
    to /sql/crew_person.sql.

  diff.py

    This script is used within the scripts/movie.sh shell script.  It's purpose
    is to read in the output resulting from

    $ diff temp/previous_movie_ratings.txt temp/temp2

    where temp2 is the text translation of data/Movie_Ratings.doc produced by
    antiword.  It parses the diff output for the new lines in temp2 that are not
    in /temp/previous_movie_ratings.txt, as well as lines that have changed
    (e.g. if I changed the star rating for a movie).  It prints these to stdout
    to be redirected within the movie.sh script.

  drop_and_create_filth_db.sh

    This shell script wipes out the filth postgres database and re-creates it
    with the current .sql in /sql.  It uses psql commands, but redirects stdout
    to /dev/null so the boring stuff doesn't get displayed.  Any stderr output,
    however, gets redirected to /temp/drop_filth_db_error.txt to see if
    anything went wrong.  This script drops (deletes) the entire filth database,
    re-creates it (the schema) with /sql/init_pg_database.sql, then populates
    the data tables with the other respective sql files in /sql (movie.sql,
    oscar.sql, etc).

  movie.sh

    This script creates the /sql/movie.sql file, which is all of the necessary
    sql insert statements to populate the movie table in the database.  What it
    does specifically is translates the /data/Movie_Ratings.doc (which documents
    all of the movies I have seen and rated) into a text file, does some
    cleaning and transformations using sed, and feeds that to the
    scripts/movie2sql.py Python script to write the sql insert statements to
    /sql/movie.sql.

    Upon the first run of the script, the temporary file,
    /temp/previous_movie_ratings.txt, is created; it is a copy of the text
    translation of /data/Movie_Ratings.doc that is created by antiword.
    Subsequent runnings of this script runs a diff on that temporary file and
    a new text file translation of the Movie_Ratings.doc to see what has been
    added or changed*.  The results of the diff are piped to the
    /scripts/diff.py Python script (see /scripts/diff.py).  So, subsequent
    runnings of this script create sql insert statements only for those movies
    that were added to the Movie_Ratings.doc document since the last time, which
    are then redirected to the temporary file, /temp/movie_additions.sql, as
    well as appended to /sql/movie.sql.  The /temp/movie_additions.sql file is
    then used by psql to add the new movies directly to the database.
    Movie updates, however, are dealt with differently.  Python's SQLAlchemy is
    used in movie2sql.py (see /scripts/movie2sql.py) to see if the movie found
    in the diff is already in the database, and if it is, the appropriate
    updates are made directly in the database through the ORM of SQLAlchemy.
    The movie2sql.py script also makes a system call to use sed to update the
    sql insert statement inside movie.sql for that particular movie.
    If a movie from the diff is not in the database, the user is asked if this
    is an update or not (because, even though it is not found in the database,
    it is possible that it is an update of the title or year of the movie).

    The end of this script then creates /pdf/movie_ratings.pdf--a PDF file for
    the movies listed in /data/Movie_Ratings.doc.

    *WARNING: this script does not account for deletions of movies in the
    Movie_Ratings.doc document.  If a movie needs to be deleted, it must be done
    manually: you MUST DELETE /temp/previous_movie_ratings.txt, rerun this
    script, and apply the changes manually in the database (or drop and
    re-populate the movie table in the database).

  movie2sql.py

    This Python script is only used in the /scripts/movie.sh shell script.  It
    takes the text produced by the movie.sh script after its cleaning and
    transformations as an argument as well as an optional "-u" switch, which
    indicates that it should run in update mode, rather than just insertion mode
    (where it just creates sql INSERT statements for the movies in the given
    file).  When it's a first run (there is no /temp/previous_movie_ratings.txt
    when /scripts/movie.sh is run), movie.sh runs movie2sql.py without the -u,
    which then just creates the previous_movie_ratings, movie.sql, and
    movie_ratings.pdf.  Any other runs, however, causes movie2sql.py to run with
    the -u option, which causes the script to use SQLAlchemy (a Pyhton Object-
    Relational Mapper) to check for (and apply) updates to the database.
    Updates are also made to movie.sql via a system call of sed.

  movie_ratings_to_LaTeX.py

    This is used within the /scripts/movie_ratings_to_pdf.sh shell script.  It
    is not to be used directly.  It takes the text file created within the
    movie_ratings_to_pdf script and creates a .tex file from it.

  movie_ratings_to_pdf.sh

    This script uses /scripts/movie_ratings_to_LaTeX.py Python script to create
    a PDF of my movie ratings from /data/Movie_Ratings.doc Word document.  The
    pdf generated by this script lies in /pdf as movie_ratings.pdf.  The result
    does not include MPAA ratings or countries of the movies as the Word doc
    does.
    
  mrc.py
  
    Stands for MovieRatingsCompiler.  This "compiles" (verifies the grammar
    of) /data/Movie_Ratings.doc.  This is run inside /scripts/movie.sh.

  oscarGivenTo.sh

    The purpose of this shell script is to clean and transform the academy
    awards data in data/oscars.csv.  It has three phases: extraction, rewriting,
    and decoding escape sequences.  In the extraction phase the desired Oscar
    category nominations are (f)grep'd from /data/oscars.csv (Oscar history csv
    file through 2009) and redirected/appended to /data/oscarsOfCategory.csv.
    The rewriting phase cleans and transforms the category names, win status,
    and special cases such as changing 'James Stewart' to 'Jimmy Stewart'.  The
    decoding escape sequences phase changes escape sequences found in the csv
    file to actual characters (e.g. '&amp;' -> '&').  This script creates the
    /data/oscarsOfCategory.csv file that /bin/OscarParser reads.

  runop.sh

    This is a temporary shell script that simply runs /bin/OscarParser (with the
    given db name and db password arguments passed in to this script).  It
    would be a pain to have to type that huge command everytime, so that's what
    this is basically.  Once the OscarParser program is deemed complete, this
    script will probably be deleted, because the /scripts/oscarGivenTo.sh shell
    script runs OscarParser (but that line is commented out at the moment, so
    while OscarParser is being written, I have been runing cop.sh,
    oscarGivenTo.sh, then runop.sh.
    
  tag.py
  
    A script that interacts with the user in order to create tag data.  Rather
    than having a separate genre table, I am using tags to include genres and
    any other tags I want to associate to a movie.  This script iterates
    through all of the movies seen in the database and asks for tags for each
    movie.  This scripts appends to /sql/tag.sql and /sql/tag_given_to.sql.

/sql (.sql files)

/src (source code files)

/workspace (directory to mess around, experiment, and test)

  years_best_template.tex and years_best_template.pdf

    This LaTeX file was used to create the corresponding .pdf file.  This .tex
    file was manually created in order to get the right look and feel of what I
    want for my annual Tyler Award lists.  Eventually, a script will generate
    the .tex file from the data in the database, and then a pdf will be
    created from that using a shell script.
