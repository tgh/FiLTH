                              F i L T H
                     (Film Library of Tyler Hayes)

-------------------------------------------------------------------------------

History
--------
This project began as a school assignment in the Fall of '09.


Overall Description
--------------------
The goal of this project is to create a program that manages my movies--movies
I have seen, movies I want to see, filmographies, oscar winners/nominees, best-
of lists, etc--all in one place, rather than multiple documents.

In the end I hope it to be a GUI application with menus, buttons, forms, etc.
and/or a web app that will let others search the database for my ratings.


Source
-------
Code consists of Python, Java, Haskell, bash scripts, and of course SQL.
Database is Postgresql.
Web pages in php (for now).


Files
------
/bin (binary files)

  tylerhayes/tools/
    
    Contains compiled java code from tylerhayes.tools.jar from my JavaTools
    project.  Used for logging in java programs such as /bin/OscarParser, as
    well as its database "virtual console".

  genre2sql

    Parses the file given as its only argument and produces sql insert
    statements for the database's genre table.  To be used with /data/genre.txt
    as its argument.  Use shell redirection to store the sql statements into
    /sql/genre.sql.  Compiled from /src/genre2sql.hs Haskell source file.

  nameFormatter

    Takes a text file containing a list of names (such as /data/crew_person.txt)
    and outputs those names in a (lastname, firstname) format.  Takes the name
    of the file to parse (/data/crew_person.txt) as its only argument.  Used in
    /scripts/crew_person.sh which redirects the output to a temp file (in
    /temp), which is then used as an argument to /scripts/crew2sql.py.  Compiled
    from /src/nameFormatter.hs Haskell source file.

  oscar2sql

    Parses the file given as its only argument and produces sql insert
    statements for the database's oscar table.  To be used with /data/oscar.txt
    as its argument.  Use shell redirection to store the sql statements into
    /sql/oscar.sql.  Compiled from /src/oscar2sql.hs Haskell source file.

  OscarParser.class

    Parses the /data/oscarsOfCategory.csv file (that is produced by
    /scripts/oscarGivenTo.sh), and produces the /sql/oscar_given_to.sql file.
    Takes two arguments: name of Postgres database, and password of database.
    Used in the /scripts/oscarGivenTo.sh shell script.  The purpose of this
    program is to produce sql insert statements to populate the oscar_given_to
    table in the database as much as possible based on the oscar data in the
    /data/oscarsOfCategory.csv file.  These statements are written to the
    /sql/oscar_given_to.sql file.

/data (data files in various formats used to populate the database)

  actedin.txt

    Basically filmographies of a small handfull of actors--formatted in such a
    way to make parsing easier for scripts and programs.  This file will be used
    (as of now, 6/1/11, it has not been used) to help populate the worked_on
    table of the database.

  crew_person.txt

    A list of as many actors, directors, cinematographers, and writers as I
    could think of that I care about or think I would need in some way.  This
    file is to be used with the scripts/crew2sql.py Python script as a
    command-line argument--the result of which is sql insert statements to
    populate the crew_person table of the database.  The sql output of the
    Python script has been redirected to produce the /sql/crew_person.sql file.

  crewperson_accented.txt

    The same as the file above but with special characters for accented letters
    such as would be in Pen√©lope Cruz.  It is still undecided as to whether the
    database will contain accented characters or not (ticket #47).

  directed.txt

    Filmographies of directors formatted like a list in the same way as
    /data/actedin.txt to make parsing easier for scripts and programs.  This
    file will be used (as of now, 6/1/11, it has not been used) to help populate
    the worked_on table of the database... or maybe not.  Filmographies.doc
    may be used instead (see /data/Filmographies.doc).

  Filmographies.doc

    An old Word document I still maintain for director filmographies.  Both
    /data/actedin.txt and /data/directed.txt came from this document.  This will
    most likely be used (with the help of antiword to convert it from a Word
    document to a text file) to help populate the worked_on table of the
    database.  Either that or converted to directed.txt, which will then be
    used.

  genre.txt

    A simple list of genres I am intereseted in for the database.  This file is
    to be used with the /bin/genre2sql program as a command-line argument, whose
    output is sql insert statements to populate the genre table in the database.
    This output has been redirected to produce the /sql/genre.sql file.

  Movie_Ratings.doc

    Here is the document that got it all started.  This document (a Word
    document) lists all of the movies I have rated, along with their year,
    country, and MPAA ratings.  I thought not only would it be nice if there was
    a way to have new movie ratings be inserted appropriately automatically, but
    also if this data I was maintaining and perusing by hand could be queryable.
    Thus, FiLTH.  Of course, it has grown to include much more than the data
    that this document provides.  antiword is used to convert this document to
    plain text in the /scripts/movie.sh shell script, and then taken from there.
    (see /scripts/movie.sh)

  oscar.txt

    A list of the Oscar categories that I care about.  This file is used with
    /bin/oscar2sql program as a command-line argument, whose output is sql
    insert statements that populate the oscar table in the database.  This
    output has been redirected to produce the /sql/oscar.sql file.

  oscars.csv

    Raw data (in CSV format) of Oscars history from 1928-2008.  This file was
    found at this site: http://www.aggdata.com/awards/oscar, which was linked to
    from this site: http://www.bloggersblog.com/blog/224081.  The file contains
    all cateogories (even the specific name changes to the same categories),
    production companies, producers, character names, etc--in other words, a lot
    of stuff I don't want/need.  This file is used in the
    /scripts/oscarGivenTo.sh shell script where fgrep, grep, and sed are used to
    extract and massage what I want out of the data.  The resulting cleaned data
    is stored in /data/oscarsOfCategory.csv.  (see /scripts/oscarGivenTo.sh)

  oscarsOfCategory.csv

    This is a cleaned version of the data found in /data/oscars.csv, and used in
    the /scripts/oscarsGivenTo.sh shell script.  This data will be used to
    populate the oscar_given_to table in the database by being given to the
    /bin/OscarParser Java program as a command-line argument, which will then
    output sql insert statements to be redirected to produce
    /sql/oscar_given_to.sql.

  otherMovies.txt

    An ad hoc list of movies I have seen a long time ago, but have not been
    reviewed (and, thus, not in the Movie_Ratings.doc document).  As of now
    (6/1/11) this file is not in use for FiLTH.

  shot.txt

    Filmographies of cinematographers listed in the same format as actedin.txt
    and directed.txt.  This file will be used (as of now, 6/1/11, it has not
    been used) to help populate the worked_on table of the database.

  wrote.txt

    Filmographies of screenwriters listed in the same format as actedin.txt,
    directed.txt, and shot.txt.  This file will be used (as of now, 6/1/11, it
    has not been used) to help populate the worked_on table of the database.

/doc (documentation)

  ER_diagram.dia

    This file graphically illustrates the Entity-Relationship diagram of FiLTH's
    database schema.  The file can only be opened with the open source program,
    Dia.

  front_end_requirements.txt

    Notes on what capabilites/functionalities are desired for FiLTH's user
    interface.

  NOTES

    Text file that acts as a kind of scratch pad for various notes regarding the
    FiLTH project.

  README

    This file.

  tickets.ods

    An OpenOffice spreadsheet containing the status of all open (and closed)
    tickets for the FiLTH project.

/gui (files pertaining to the user interface of FiLTH)

  [currently empty]

/images (image files)

  filth_logo.png

    The logo for FiLTH created in Photoshop.  The background is transparent.

/jar (any necessary .jar (JavaARchive) files go here)

  javacsv.jar

    Small Java library for reading/writing CSV files.  This API is used in
    /src/OscarParser.java and is required to compile and run /bin/OscarParser.
    (see /scripts/cop.sh and /scripts/runop.sh for compiling and running
    /bin/OscarParser)

  postgresql-8.4-701.jdbc4.jar

    API for connecting to a PostgreSQL database in Java.  This is used in
    /src/OscarParser.java and is required to compile and run /bin/OscarParser.

  tylerhayes.tools.jar

    A small collection of Java code that I have written and maintain.  It is
    mostly used for the Log API for logging events/data during the execution of
    a program (useful for debugging, for example).  The code is kept under
    another Git repository on gitHub.com (tgh/JavaTools).  Whenever code has
    been added/removed/changed in JavaTools, scripts/update_jar.sh is run to
    update this file.  When cop.sh is run, this code is also (unintentionally)
    compiled into /bin/tylerhayes/tools.

/pdf (pdf files)

  movie_ratings.pdf

    PDF version of /data/Movie_Ratings.doc generated by
    /scripts/movie_ratings_to_pdf.sh shell script.  This version of the movie
    ratings do not include the MPAA rating or country of origin.

/scripts (as in programming scripts, not movie scripts)

  cop.sh

    Shell script that compiles /src/OscarParser.java into /bin/OscarParser.class

  crew2sql.py

    Python script that produces sql insert statements to populate the
    crew_person table of the database given a specifically formatted text file
    of names in the film industry.  This script is not used directly--it is used
    in the /scripts/crew_person.sh shell script (see below).

  crew_person.sh

    Shell script to populate the crew_person table of the database.  It first
    executes /bin/nameFormatter to format the names in /data/crew_person.txt and
    then feeds the output of nameFormatter to the /scripts/crew2sql.py Python
    script to produce the sql insert statements.  That output is then redirected
    to /sql/crew_person.sql.

  diff.py

    This script is used within the scripts/movie.sh shell script.  It's purpose
    is to read in the output resulting from

    $ diff temp/previous_movie_ratings.txt temp/temp2

    where temp2 is the text translation of data/Movie_Ratings.doc produced by
    antiword.  It parses the diff output for the new lines in temp2 that are not
    in /temp/previous_movie_ratings.txt, essentially grabbing the movies that
    were added since the previous run of the movie.sh script.  It prints these
    to stdout to be redirected within the movie.sh script.

  drop_and_create_filth_db.sh

    This shell script wipes out the filth postgres database and re-creates it
    with the current .sql in /sql.  It uses psql commands, but redirects stdout
    to /dev/null so the boring stuff doesn't get displayed.  Any stderr output,
    however, gets redirected to /temp/drop_filth_db_error.txt to see if
    anything went wrong.  This script drops (deletes) the entire filth database,
    re-creates it (the schema) with /sql/init_pg_database.sql, then populates
    the data tables with the other respective sql files in /sql (movie.sql,
    oscar.sql, etc).

  drop_and_create_test_db.sh

    Same as the above script (drop_and_create_filth_db.sh), but for the 'test'
    postgres database.  The test database is probably unnecessary, but it makes
    me feel better if I am about to make big changes or something--I first try
    it out with the test database before applying the changes to the 'real'
    database (filth).

  movie.sh

    This script creates the /sql/movie.sql file, which is all of the necessary
    sql insert statements to populate the movie table in the database.  What it
    does specifically is translates the /data/Movie_Ratings.doc (which documents
    all of the movies I have seen and rated) into a text file, does some
    cleaning and transformations using sed, and feeds that to the
    scripts/movie2sql.py Python script to create the sql insert statements
    (which are output to stdout and redirected to /sql/movie.sql).

    Upon the first run of the script, the temporary file,
    /temp/previous_movie_ratings.txt, is created; it is a copy of the text
    translation of /data/Movie_Ratings.doc that is created by antiword.
    Subsequent runnings of this script runs a diff on that temporary file and
    a new text file translation of the Movie_Ratings.doc to see what has been
    added*.  The results of the diff are piped to the /scripts/diff.py Python
    script (see /scripts/diff.py).  So, subsequent runnings of this script
    create sql insert statements only for those movies that were added to the
    Movie_Ratings.doc document since the last time, which are then redirected to
    the temporary file, /temp/movie_additions.sql, as well as appended to
    /sql/movie.sql

    *WARNING: this script does not account for changes or deletions of movies in
    the Movie_Ratings.doc document.  If a movie needs to be deleted or changed,
    it must be done manually: you MUST DELETE /temp/previous_movie_ratings.txt,
    rerun this script, and apply the changes manually in the database (or drop
    and re-populate the movie table in the database).

  movie2sql.py

    This Python script is only used in the /scripts/movie.sh shell script.  It
    takes the text produced by the movie.sh script after its cleaning and
    transformations and produces the necessary sql insert statements (to stdout,
    which are redirected to /sql/movie.sql and/or /temp/movie_additions.sql).
    (see /scripts/movie.sh)

  movie_ratings_to_pdf.sh

    This script uses /scripts/movie_ratings_to_LaTeX.py Python script to create
    a PDF of my movie ratings from /data/Movie_Ratings.doc Word document.  The
    pdf generated by this script lies in /pdf as movie_ratings.pdf.  The result
    does not include MPAA ratings or countries of the movies as the Word doc
    does.

  movie_ratings_to_LaTeX.py

    This is used within the /scripts/movie_ratings_to_pdf.sh shell script.  It
    is not to be used directly.  It takes the text file created within the
    movie_ratings_to_pdf script and creates a .tex file from it.

  oscarGivenTo.sh

    The purpose of this shell script is to clean and transform the academy
    awards data in data/oscars.csv.  It has three phases: extraction, rewriting,
    and decoding escape sequences.  In the extraction phase the desired Oscar
    category nominations are (f)grep'd from /data/oscars.csv (Oscar history csv
    file through 2009) and redirected/appended to /data/oscarsOfCategory.csv.
    The rewriting phase cleans and transforms the category names, win status,
    and special cases such as changing 'James Stewart' to 'Jimmy Stewart'.  The
    decoding escape sequences phase changes escape sequences found in the csv
    file to actual characters (e.g. '&amp;' -> '&').  This script creates the
    /data/oscarsOfCategory.csv file that /bin/OscarParser reads.

  runop.sh

    This is a temporary shell script that simply runs /bin/OscarParser (with the
    given db name and db password arguments passed in to this script).  It
    would be a pain to have to type that huge command everytime, so that's what
    this is basically.  Once the OscarParser program is deemed complete, this
    script will probably be deleted, because the /scripts/oscarGivenTo.sh shell
    script runs OscarParser (but that line is commented out at the moment, so
    while OscarParser is being written, I have been runing cop.sh,
    oscarGivenTo.sh, then runop.sh.

  update_jar.sh

    This shell script simply copies the current version of tylerhayes.tools.jar
    found in its project directory and overwrites /jar/tylerhayes.tools.jar.

  update_movie_table.sh

    This shell script recreates the entire /sql/movie.sql file (unlike
    /scripts/movie.sh, which attempts to only append movie additions to
    /data/Movie_Ratings.doc), and updates the movie table in the databse as
    well by removing every tuple in the table, reseting the mid primary key
    sequence to 0, and executing all of the sql insert statements in
    /sql/movie.sql. 

/sql (.sql files)

  crew_person.sql

    SQL insert statements for populating the crew_person table.

  genre.sql

    SQL insert statements for populating the genre table.

  init_mysql_database.sql

    SQL DDL (data definition language) for creating the filth database
    (tables, primary keys, foreign keys, integrity constraints, funcitons) for
    MySQL.  This file isn't updated as much as the next file...

  init_pg_database.sql

    SQL DDL (data definition language) for creating the filth database
    (tables, primary keys, foreign keys, integrity constraints, funcitons) for
    PostgreSQL.

  movie.sql

    SQL insert statements for populating the movie table.

  oscar.sql

    SQL insert statements for populating the oscar table.

  oscar_given_to.sql

    SQL insert statements for populating the oscar_given_to table.

  tyler.sql

    SQL insert statements for populating the tyler table.

/src (source code files)

  genre2sql.hs

    Haskell source code for /bin/genre2sql. (see /bin/genre2sql)

  nameFormatter.hs

    Haskell source code for /bin/nameFormatter. (see /bin/nameFormatter)

  oscar2sql.hs

    Haskell source code for /bin/oscar2sql. (see /bin/oscar2sql)

  OscarParser.java

    Java source code for /bin/OscarParser.class. (see /bin/OscarParser.class)

/temp (temporary files--throwaway files generated by scipts and programs, or
       just temp files created manually during experimentation)

  drop_filth_db_error.txt and drop_test_db_error.txt

    These text files are created by the /scripts/drop_and_create... shell
    scripts if and when there are errors that occur (output sent to stderr)
    during the running of those scripts.  The stderr output is redirected to
    temporary files so that I can easily go bask and look at the output later or
    if the output is so large to overflow the terminal display buffer (or
    whatever it's called).

  movie_additions.sql
   
    This file is created by /scripts/movie.sh.  The contents are sql insert
    statements for movies added to /data/Movie_Ratings.doc since the last time
    /scripts/movie.sh was run.  This file is then used with psql to actually
    insert those new movies into the database--they are also appended to
    /sql/movie.sql.

  oscarParser.log

    A log of what happened during the most recent execution of /bin/OscarParser.

  previous_movie_ratings.txt

    This is created and used by the /scripts/movie.sh script.  It is used to
    determine what movie(s) was(were) added to /data/Movie_Ratings.doc.  If this
    gets deleted, all of the movies will be added (again) to the database.  If
    this file is manipulated in anyway other than running the movie.sh script...
    bad things will happen.  So don't mess with it.

  recompile_OscarParser

    This file is created when the /sctipts/update_jar.sh script is run.  The
    /scripts/runop.sh script first checks for this file, and if it is present,
    the script will not execute since the OscarParser program must be recompiled
    with the updated jar file before being executed.  The /scripts/cop.sh script
    removes this file (since that script compiles OscarParser).

  temp and temp2

    Also created by /scripts/movie.sh.  Although deleting these or changing them
    in anyway doesn't matter--they're only used during the execution of
    movie.sh.

/trash (unused-but-still-around-just-in-case files)

  country, country.sql, country.txt, country2sql, country2sql.hs

    These files pertain to when the database schema had country as a separate
    entity rather than an attribute of the movie table.

  CSV.hs

    A Haskell module written by someone at CalTech I think.  This module
    provides functions that operate on CSV files.  This was used in the now
    trashed crew2sql.hs code, which was replaced by the /scripts/crew2sql.py
    Python script.  After getting a new laptop and updating the Haskell Platform
    the crew2sql.hs (or anything else importing the CSV module) failed to
    compile.

  crew2sql.hs

    This was replaced by /scripts/crew2sql.py Python script.
    (see /trash/CSV.hs)

  movie2sql.hs

    This was replaced by /scripts/movie2sql.py Python script.
    (see /trash/CSV.hs)

/web (web pages)

  *.php

    All of these .php files are web page files that were created for the cs386
    Intro to Databases class--which started this whole project.  These are old
    and refer to the database as it was back then--in other words, a different
    schema.  These are here as a basis for future web pages if FiLTH becomes a
    web app as well.

/workspace (directory to mess around, experiment, and test)

  FiLTH-gui/

    A directory tree created by NetBeans when trying out NetBean's GUI builder.
    I don't know what all of these files are really--most were auto-generated by
    NetBeans.

  base.py

    Another auto-generated file.  This one by wxGlade?  I don't remember.
    Anyway, it looks like a GUI-related Python source file when trying to learn
    and test out some Python GUI builder.

  years_best_template.tex and years_best_template.pdf

    This LaTeX file was used to create the corresponding .pdf file.  This .tex
    file was manually created in order to get the right look and feel of what I
    want for my annual Tyler Award lists.  Eventually, a script will generate
    the .tex file from the data in the database, and then a pdf will be
    created from that using a shell script.
