<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!--                                                                     -->
    <!-- The application context definition for service tests                -->
    <!-- (tests validating *Service java classes).                           -->
    <!--                                                                     -->
    
    <context:component-scan base-package="com.filth.service"/>
    <context:component-scan base-package="com.filth.dao"/>
    <context:component-scan base-package="com.filth.model"/>
    
    <!-- Property configurer: a property resource configurer resolves placeholders
         for properties (e.g: something like "${app.foo.property}"). It pulls values
         from specified properties files. -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>file:./conf/filth.properties</value>
            </list>
        </property>
    </bean>
    
    <!--                                                                                            -->
    <!-- Database connectivity via Hibernate                                                        -->
    <!--                                                                                            -->
    <!-- Context configurations extending from this one are to define their own "dataSource" beans. -->
    <!--                                                                                            -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.default_schema">${filth.db.schema}</prop>
                <prop key="hibernate.jdbc.use_get_generated_keys">true</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.filth.model</value>
            </list>
        </property>
        <property name="annotatedPackages" >
            <list>
                <value>com.filth.model</value>
            </list>
        </property>
    </bean>
    
    <!-- Database connectivity via Hibernate -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${test.db.url}" />
        <property name="username" value="${test.db.username}" />
    </bean>
    
    <tx:annotation-driven transaction-manager="txManager" />
    
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

</beans>
